{
	"Header Guard": {
		"prefix": "headerguard",
		"body": [
			"#ifndef ${1:${TM_FILENAME_BASE}_H}",
			"# define ${1:${TM_FILENAME_BASE}_H}",
			"",
			"${0}",
			"",
			"#endif // ${1:${TM_FILENAME_BASE}_H}"
		],
		"description": "Create an ifndef header guard"
	},

	"Declare Class Canonical Form": {
		"prefix": "classcanon_dec",
		"body": [
			"class ${1:ClassName} {",
			"public:",
			"	${1:ClassName}();",
			"	~${1:ClassName}();",
			"	${1:ClassName}(const ${1:ClassName}& other);",
			"",
			"	${1:ClassName}&	operator=(const ${1:ClassName}& other);",
			"",
			"private:",
			"	// Private members go here",
			"};",
		],
		"description": "Declare a class canonical form"
	},

	"Define Class Canonical Form": {
		"prefix": "classcanon_def",
		"body": [
			"#include \"${1:ClassName}.hpp\"",
			"",
			"${1:ClassName}::${1:ClassName}() {}",
			"${1:ClassName}::~${1:ClassName}() {}",
			"${1:ClassName}::${1:ClassName}(const ${1:ClassName}& other) {",
			"	*this = other;"
			"}"
			"",
			"${1:ClassName}&	${1:ClassName}::operator=(const ${1:ClassName}& other) {",
			"	*this = other;"
			"	return (*this);"
			"}"
			"",
		],
		"description": "Define a class canonical form"
	},

	"Declare Accessor and Mutator": {
		"prefix": "getset_dec",
		"body": [
			"${2:type}	get${1:name}() const;",
			"void	set${1:name}(${2:type}& value);",
		],
		"description": "Declare accessor (getter) and mutator (setter) functions for a class member"
	},

	"Define Accessor and Mutator": {
		"prefix": "getset_def",
		"body": [
			"${2:type}	${3:ClassName}::get${1:name}() const {",
			"	return (${1:name});",
			"}",
			"void	${3:ClassName}::set${1:name}(${2:type}& value) {",
			"	${1:name} = value;",
			"}"
		],
		"description": "Define accessor (getter) and mutator (setter) functions for a class member"
	},

	"Declare Accessor": {
		"prefix": "get_dec",
		"body": [
			"const ${2:type}&	get${1:name}() const;",
		],
		"description": "Declare accessor (getter) functions for a class member"
	},

	"Define Accessor": {
		"prefix": "get_def",
		"body": [
			"const ${2:type}&	${3:ClassName}::get${1:name}() const {",
			"	return (${1:name});",
			"}"
		],
		"description": "Define accessor (getter) functions for a class member"
	},

	"Declare exception": {
		"prefix": "except_dec",
		"body": [
			"class	${1:ClassName}::${2:name} : public std::exception {",
			"public:",
			"	static const char	*msg;",
			"	const char			*what() const throw();",
			"};",
		],
		"description": "Declare exception"
	},

	"Define exception": {
		"prefix": "except_def",
		"body": [
			"const char	*${1:ClassName}::${2:name}::msg = ${3:msg};"
			"const char	*Form::GradeTooHighException::what() const throw() {"
			"	return (msg);"
			"}"
		],
		"description": "Define exception"
	}
}
